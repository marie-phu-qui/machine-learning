{"dependencies":[{"name":"/home/student/workspace/Lord-of-the-News/server/tensorflow/text-classif/package.json","includedInParent":true,"mtime":1538517523128},{"name":"@tensorflow/tfjs","loc":{"line":36,"column":20}},{"name":"./data","loc":{"line":38,"column":25}},{"name":"./ai","loc":{"line":39,"column":117}},{"name":"./utils","loc":{"line":40,"column":23}}],"generated":{"js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SaveableLSTMTextGenerator = exports.LSTMTextGenerator = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _tfjs = require('@tensorflow/tfjs');\n\nvar tf = _interopRequireWildcard(_tfjs);\n\nvar _data = require('./data');\n\nvar _ai = require('./ai');\n\nvar _utils = require('./utils');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } } // this file is key = create model - train it - save it in user's browser \n// can be twitched : activation type in a layer - type of optimizer - loss category - learning rate - \n//  also in Fit Model: numEpochs, examplesPerEpoch, batchSize, validationSplit\n//  in Generate Text : sentenceIndices (Seed sentence), length (num of characters in generated text), Temperature (needs to be >0) \n// We need to save our model once created and make it useable for our app : reconsider saveModel, removeModel, checkStoredModelStatus\n\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Example: LSTM Text Generation.\n *\n * Inspiration comes from:\n *\n * -\n * https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py\n * - Andrej Karpathy. \"The Unreasonable Effectiveness of Recurrent Neural\n * Networks\" http://karpathy.github.io/2015/05/21/rnn-effectiveness/\n */\n\n/**\n * Class that manages LSTM-based text generation.\n *\n * This class manages the following:\n *\n * - Creating and training a LSTM model, written with the tf.layers API, to\n *   predict the next character given a sequence of input characters.\n * - Generating random text using the LSTM model.\n */\nvar LSTMTextGenerator = exports.LSTMTextGenerator = function () {\n  /**\n   * Constructor of NeuralNetworkTextGenerator.\n   *\n   * @param {TextData} textData An instance of `TextData`.\n   */\n  function LSTMTextGenerator(textData) {\n    _classCallCheck(this, LSTMTextGenerator);\n\n    this.textData_ = textData;\n    this.charSetSize_ = textData.charSetSize();\n    this.sampleLen_ = textData.sampleLen();\n    this.textLen_ = textData.textLen();\n  }\n\n  /**\n   * Create LSTM model from scratch.\n   *\n   * @param {number | number[]} lstmLayerSizes Sizes of the LSTM layers, as a\n   *   number or an non-empty array of numbers.\n   */\n\n\n  _createClass(LSTMTextGenerator, [{\n    key: 'createModel',\n    value: function createModel(lstmLayerSizes) {\n      if (!Array.isArray(lstmLayerSizes)) {\n        lstmLayerSizes = [lstmLayerSizes];\n      }\n\n      this.model = tf.sequential();\n      for (var i = 0; i < lstmLayerSizes.length; ++i) {\n        var lstmLayerSize = lstmLayerSizes[i];\n        this.model.add(tf.layers.lstm({\n          units: lstmLayerSize,\n          returnSequences: i < lstmLayerSizes.length - 1,\n          inputShape: i === 0 ? [this.sampleLen_, this.charSetSize_] : undefined\n        }));\n      }\n      this.model.add(tf.layers.dense({ units: this.charSetSize_, activation: 'softmax' }));\n    }\n\n    /**\n     * Compile model for training.\n     *\n     * @param {number} learningRate The learning rate to use during training.\n     */\n\n  }, {\n    key: 'compileModel',\n    value: function compileModel(learningRate) {\n      var optimizer = tf.train.rmsprop(learningRate);\n      this.model.compile({ optimizer: optimizer, loss: 'categoricalCrossentropy' });\n      console.log('Compiled model with learning rate ' + learningRate);\n      this.model.summary();\n    }\n\n    /**\n     * Train the LSTM model.\n     *\n     * @param {number} numEpochs Number of epochs to train the model for.\n     * @param {number} examplesPerEpoch Number of epochs to use in each training\n     *   epochs.\n     * @param {number} batchSize Batch size to use during training.\n     * @param {number} validationSplit Validation split to be used during the\n     *   training epochs.\n     */\n\n  }, {\n    key: 'fitModel',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(numEpochs, examplesPerEpoch, batchSize, validationSplit) {\n        var _this = this;\n\n        var batchCount, batchesPerEpoch, totalBatches, t, i, _textData_$nextDataEp, _textData_$nextDataEp2, xs, ys;\n\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                batchCount = 0;\n                batchesPerEpoch = examplesPerEpoch / batchSize;\n                totalBatches = numEpochs * batchesPerEpoch;\n\n\n                (0, _ai.onTrainBegin)();\n                _context3.next = 6;\n                return tf.nextFrame();\n\n              case 6:\n                t = new Date().getTime();\n                i = 0;\n\n              case 8:\n                if (!(i < numEpochs)) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                _textData_$nextDataEp = this.textData_.nextDataEpoch(examplesPerEpoch), _textData_$nextDataEp2 = _slicedToArray(_textData_$nextDataEp, 2), xs = _textData_$nextDataEp2[0], ys = _textData_$nextDataEp2[1];\n                _context3.next = 12;\n                return this.model.fit(xs, ys, {\n                  epochs: 1,\n                  batchSize: batchSize,\n                  validationSplit: validationSplit,\n                  callbacks: {\n                    onBatchEnd: function () {\n                      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(batch, logs) {\n                        var t1, examplesPerSec;\n                        return regeneratorRuntime.wrap(function _callee$(_context) {\n                          while (1) {\n                            switch (_context.prev = _context.next) {\n                              case 0:\n                                // Calculate the training speed in the current batch, in # of\n                                // examples per second.\n                                t1 = new Date().getTime();\n                                examplesPerSec = batchSize / ((t1 - t) / 1e3);\n\n                                t = t1;\n                                (0, _ai.onTrainBatchEnd)(logs.loss, ++batchCount / totalBatches, examplesPerSec);\n\n                              case 4:\n                              case 'end':\n                                return _context.stop();\n                            }\n                          }\n                        }, _callee, _this);\n                      }));\n\n                      function onBatchEnd(_x5, _x6) {\n                        return _ref2.apply(this, arguments);\n                      }\n\n                      return onBatchEnd;\n                    }(),\n                    onEpochEnd: function () {\n                      var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(epoch, logs) {\n                        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                          while (1) {\n                            switch (_context2.prev = _context2.next) {\n                              case 0:\n                                (0, _ai.onTrainEpochEnd)(logs.val_loss);\n\n                              case 1:\n                              case 'end':\n                                return _context2.stop();\n                            }\n                          }\n                        }, _callee2, _this);\n                      }));\n\n                      function onEpochEnd(_x7, _x8) {\n                        return _ref3.apply(this, arguments);\n                      }\n\n                      return onEpochEnd;\n                    }()\n                  }\n                });\n\n              case 12:\n                xs.dispose();\n                ys.dispose();\n\n              case 14:\n                ++i;\n                _context3.next = 8;\n                break;\n\n              case 17:\n              case 'end':\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fitModel(_x, _x2, _x3, _x4) {\n        return _ref.apply(this, arguments);\n      }\n\n      return fitModel;\n    }()\n\n    /**\n     * Generate text using the LSTM model.\n     *\n     * @param {number[]} sentenceIndices Seed sentence, represented as the\n     *   indices of the constituent characters.\n     * @param {number} length Length of the text to generate, in number of\n     *   characters.\n     * @param {number} temperature Temperature parameter. Must be a number > 0.\n     * @returns {string} The generated text.\n     */\n\n  }, {\n    key: 'generateText',\n    value: function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(sentenceIndices, length, temperature) {\n        var temperatureScalar, generated, inputBuffer, i, input, output, winnerIndex, winnerChar;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                (0, _ai.onTextGenerationBegin)();\n                temperatureScalar = tf.scalar(temperature);\n                generated = '';\n\n              case 3:\n                if (!(generated.length < length)) {\n                  _context4.next = 19;\n                  break;\n                }\n\n                // Encode the current input sequence as a one-hot Tensor.\n                inputBuffer = new tf.TensorBuffer([1, this.sampleLen_, this.charSetSize_]);\n\n                for (i = 0; i < this.sampleLen_; ++i) {\n                  inputBuffer.set(1, 0, i, sentenceIndices[i]);\n                }\n                input = inputBuffer.toTensor();\n\n                // Call model.predict() to get the probability values of the next\n                // character.\n\n                output = this.model.predict(input);\n\n                // Sample randomly based on the probability values.\n\n                winnerIndex = (0, _utils.sample)(tf.squeeze(output), temperatureScalar);\n                winnerChar = this.textData_.getFromCharSet(winnerIndex);\n                _context4.next = 12;\n                return (0, _ai.onTextGenerationChar)(winnerChar);\n\n              case 12:\n\n                generated += winnerChar;\n                sentenceIndices = sentenceIndices.slice(1);\n                sentenceIndices.push(winnerIndex);\n\n                input.dispose();\n                output.dispose();\n                _context4.next = 3;\n                break;\n\n              case 19:\n                temperatureScalar.dispose();\n                return _context4.abrupt('return', generated);\n\n              case 21:\n              case 'end':\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function generateText(_x9, _x10, _x11) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return generateText;\n    }()\n  }]);\n\n  return LSTMTextGenerator;\n}();\n\n;\n\n/**\n * A subclass of LSTMTextGenerator that supports model saving and loading.\n *\n * The model is saved to and loaded from browser's IndexedDB.\n */\n\nvar SaveableLSTMTextGenerator = exports.SaveableLSTMTextGenerator = function (_LSTMTextGenerator) {\n  _inherits(SaveableLSTMTextGenerator, _LSTMTextGenerator);\n\n  /**\n   * Constructor of NeuralNetworkTextGenerator.\n   *\n   * @param {TextData} textData An instance of `TextData`.\n   */\n  function SaveableLSTMTextGenerator(textData) {\n    _classCallCheck(this, SaveableLSTMTextGenerator);\n\n    var _this2 = _possibleConstructorReturn(this, (SaveableLSTMTextGenerator.__proto__ || Object.getPrototypeOf(SaveableLSTMTextGenerator)).call(this, textData));\n\n    _this2.modelIdentifier_ = textData.dataIdentifier();\n    _this2.MODEL_SAVE_PATH_PREFIX_ = 'indexeddb://lstm-text-generation';\n    _this2.modelSavePath_ = _this2.MODEL_SAVE_PATH_PREFIX_ + '/' + _this2.modelIdentifier_;\n    return _this2;\n  }\n\n  /**\n   * Get model identifier.\n   *\n   * @returns {string} The model identifier.\n   */\n\n\n  _createClass(SaveableLSTMTextGenerator, [{\n    key: 'modelIdentifier',\n    value: function modelIdentifier() {\n      return this.modelIdentifier_;\n    }\n\n    /**\n     * Create LSTM model if it is not saved locally; load it if it is.\n     *\n     * @param {number | number[]} lstmLayerSizes Sizes of the LSTM layers, as a\n     *   number or an non-empty array of numbers.\n     */\n\n  }, {\n    key: 'loadModel',\n    value: function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(lstmLayerSizes) {\n        var modelsInfo;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return tf.io.listModels();\n\n              case 2:\n                modelsInfo = _context5.sent;\n\n                if (!(this.modelSavePath_ in modelsInfo)) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                console.log('Loading existing model...');\n                _context5.next = 7;\n                return tf.loadModel(this.modelSavePath_);\n\n              case 7:\n                this.model = _context5.sent;\n\n                console.log('Loaded model from ' + this.modelSavePath_);\n                _context5.next = 12;\n                break;\n\n              case 11:\n                throw new Error('Cannot find model at ' + this.modelSavePath_ + '. ' + 'Creating model from scratch.');\n\n              case 12:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function loadModel(_x12) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return loadModel;\n    }()\n\n    /**\n     * Save the model in IndexedDB.\n     *\n     * @returns ModelInfo from the saving, if the saving succeeds.\n     */\n\n  }, {\n    key: 'saveModel',\n    value: function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(this.model == null)) {\n                  _context6.next = 4;\n                  break;\n                }\n\n                throw new Error('Cannot save model before creating model.');\n\n              case 4:\n                _context6.next = 6;\n                return this.model.save(this.modelSavePath_);\n\n              case 6:\n                return _context6.abrupt('return', _context6.sent);\n\n              case 7:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function saveModel() {\n        return _ref6.apply(this, arguments);\n      }\n\n      return saveModel;\n    }()\n\n    /**\n     * Remove the locally saved model from IndexedDB.\n     */\n\n  }, {\n    key: 'removeModel',\n    value: function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.checkStoredModelStatus();\n\n              case 2:\n                _context7.t0 = _context7.sent;\n\n                if (!(_context7.t0 == null)) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                throw new Error('Cannot remove locally saved model because it does not exist.');\n\n              case 5:\n                _context7.next = 7;\n                return tf.io.removeModel(this.modelSavePath_);\n\n              case 7:\n                return _context7.abrupt('return', _context7.sent);\n\n              case 8:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function removeModel() {\n        return _ref7.apply(this, arguments);\n      }\n\n      return removeModel;\n    }()\n\n    /**\n     * Check the status of locally saved model.\n     *\n     * @returns If the locally saved model exists, the model info as a JSON\n     *   object. Else, `undefined`.\n     */\n\n  }, {\n    key: 'checkStoredModelStatus',\n    value: function () {\n      var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n        var modelsInfo;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return tf.io.listModels();\n\n              case 2:\n                modelsInfo = _context8.sent;\n                return _context8.abrupt('return', modelsInfo[this.modelSavePath_]);\n\n              case 4:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function checkStoredModelStatus() {\n        return _ref8.apply(this, arguments);\n      }\n\n      return checkStoredModelStatus;\n    }()\n\n    /**\n     * Get a representation of the sizes of the LSTM layers in the model.\n     *\n     * @returns {number | number[]} The sizes (i.e., number of units) of the\n     *   LSTM layers that the model contains. If there is only one LSTM layer, a\n     *   single number is returned; else, an Array of numbers is returned.\n     */\n\n  }, {\n    key: 'lstmLayerSizes',\n    value: function lstmLayerSizes() {\n      if (this.model == null) {\n        throw new Error('Create model first.');\n      }\n      var numLSTMLayers = this.model.layers.length - 1;\n      var layerSizes = [];\n      for (var i = 0; i < numLSTMLayers; ++i) {\n        layerSizes.push(this.model.layers[i].units);\n      }\n      return layerSizes.length === 1 ? layerSizes[0] : layerSizes;\n    }\n  }]);\n\n  return SaveableLSTMTextGenerator;\n}(LSTMTextGenerator);\n\n(0, _ai.setUpUI)();","map":{"mappings":[{"generated":{"line":12,"column":0},"source":"index.js","original":{"line":36,"column":0}},{"name":"tf","generated":{"line":14,"column":4},"source":"index.js","original":{"line":36,"column":12}},{"generated":{"line":16,"column":0},"source":"index.js","original":{"line":38,"column":0}},{"generated":{"line":18,"column":0},"source":"index.js","original":{"line":39,"column":0}},{"generated":{"line":20,"column":0},"source":"index.js","original":{"line":40,"column":0}},{"generated":{"line":30,"column":154},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":31,"column":0},"source":"index.js","original":{"line":2,"column":0}},{"generated":{"line":32,"column":0},"source":"index.js","original":{"line":3,"column":0}},{"generated":{"line":33,"column":0},"source":"index.js","original":{"line":4,"column":0}},{"generated":{"line":34,"column":0},"source":"index.js","original":{"line":5,"column":0}},{"generated":{"line":37,"column":0},"source":"index.js","original":{"line":8,"column":0}},{"generated":{"line":54,"column":0},"source":"index.js","original":{"line":25,"column":0}},{"generated":{"line":65,"column":0},"source":"index.js","original":{"line":42,"column":0}},{"name":"LSTMTextGenerator","generated":{"line":74,"column":4},"source":"index.js","original":{"line":51,"column":13}},{"name":"LSTMTextGenerator","generated":{"line":74,"column":32},"source":"index.js","original":{"line":51,"column":13}},{"generated":{"line":75,"column":0},"source":"index.js","original":{"line":52,"column":2}},{"generated":{"line":80,"column":0},"source":"index.js","original":{"line":57,"column":2}},{"name":"textData","generated":{"line":80,"column":29},"source":"index.js","original":{"line":57,"column":14}},{"generated":{"line":80,"column":37},"source":"index.js","original":{"line":57,"column":2}},{"generated":{"line":80,"column":39},"source":"index.js","original":{"line":57,"column":24}},{"generated":{"line":81,"column":0},"source":"index.js","original":{"line":57,"column":24}},{"generated":{"line":83,"column":0},"source":"index.js","original":{"line":58,"column":4}},{"name":"textData_","generated":{"line":83,"column":9},"source":"index.js","original":{"line":58,"column":9}},{"generated":{"line":83,"column":18},"source":"index.js","original":{"line":58,"column":4}},{"name":"textData","generated":{"line":83,"column":21},"source":"index.js","original":{"line":58,"column":21}},{"generated":{"line":83,"column":29},"source":"index.js","original":{"line":58,"column":4}},{"generated":{"line":84,"column":0},"source":"index.js","original":{"line":59,"column":4}},{"name":"charSetSize_","generated":{"line":84,"column":9},"source":"index.js","original":{"line":59,"column":9}},{"generated":{"line":84,"column":21},"source":"index.js","original":{"line":59,"column":4}},{"name":"textData","generated":{"line":84,"column":24},"source":"index.js","original":{"line":59,"column":24}},{"name":"charSetSize","generated":{"line":84,"column":33},"source":"index.js","original":{"line":59,"column":33}},{"generated":{"line":84,"column":44},"source":"index.js","original":{"line":59,"column":24}},{"generated":{"line":84,"column":46},"source":"index.js","original":{"line":59,"column":4}},{"generated":{"line":85,"column":0},"source":"index.js","original":{"line":60,"column":4}},{"name":"sampleLen_","generated":{"line":85,"column":9},"source":"index.js","original":{"line":60,"column":9}},{"generated":{"line":85,"column":19},"source":"index.js","original":{"line":60,"column":4}},{"name":"textData","generated":{"line":85,"column":22},"source":"index.js","original":{"line":60,"column":22}},{"name":"sampleLen","generated":{"line":85,"column":31},"source":"index.js","original":{"line":60,"column":31}},{"generated":{"line":85,"column":40},"source":"index.js","original":{"line":60,"column":22}},{"generated":{"line":85,"column":42},"source":"index.js","original":{"line":60,"column":4}},{"generated":{"line":86,"column":0},"source":"index.js","original":{"line":61,"column":4}},{"name":"textLen_","generated":{"line":86,"column":9},"source":"index.js","original":{"line":61,"column":9}},{"generated":{"line":86,"column":17},"source":"index.js","original":{"line":61,"column":4}},{"name":"textData","generated":{"line":86,"column":20},"source":"index.js","original":{"line":61,"column":20}},{"name":"textLen","generated":{"line":86,"column":29},"source":"index.js","original":{"line":61,"column":29}},{"generated":{"line":86,"column":36},"source":"index.js","original":{"line":61,"column":20}},{"generated":{"line":86,"column":38},"source":"index.js","original":{"line":61,"column":4}},{"generated":{"line":87,"column":0},"source":"index.js","original":{"line":62,"column":3}},{"generated":{"line":89,"column":0},"source":"index.js","original":{"line":64,"column":2}},{"name":"lstmLayerSizes","generated":{"line":99,"column":32},"source":"index.js","original":{"line":70,"column":14}},{"generated":{"line":99,"column":48},"source":"index.js","original":{"line":70,"column":30}},{"generated":{"line":100,"column":0},"source":"index.js","original":{"line":71,"column":4}},{"generated":{"line":100,"column":10},"source":"index.js","original":{"line":71,"column":8}},{"name":"Array","generated":{"line":100,"column":11},"source":"index.js","original":{"line":71,"column":9}},{"name":"isArray","generated":{"line":100,"column":17},"source":"index.js","original":{"line":71,"column":15}},{"generated":{"line":100,"column":24},"source":"index.js","original":{"line":71,"column":9}},{"name":"lstmLayerSizes","generated":{"line":100,"column":25},"source":"index.js","original":{"line":71,"column":23}},{"generated":{"line":100,"column":39},"source":"index.js","original":{"line":71,"column":9}},{"generated":{"line":100,"column":40},"source":"index.js","original":{"line":71,"column":4}},{"generated":{"line":100,"column":42},"source":"index.js","original":{"line":71,"column":40}},{"name":"lstmLayerSizes","generated":{"line":101,"column":0},"source":"index.js","original":{"line":72,"column":6}},{"generated":{"line":101,"column":25},"source":"index.js","original":{"line":72,"column":23}},{"name":"lstmLayerSizes","generated":{"line":101,"column":26},"source":"index.js","original":{"line":72,"column":24}},{"generated":{"line":101,"column":40},"source":"index.js","original":{"line":72,"column":23}},{"generated":{"line":101,"column":41},"source":"index.js","original":{"line":72,"column":6}},{"generated":{"line":102,"column":0},"source":"index.js","original":{"line":73,"column":5}},{"generated":{"line":104,"column":0},"source":"index.js","original":{"line":75,"column":4}},{"name":"model","generated":{"line":104,"column":11},"source":"index.js","original":{"line":75,"column":9}},{"generated":{"line":104,"column":16},"source":"index.js","original":{"line":75,"column":4}},{"name":"tf","generated":{"line":104,"column":19},"source":"index.js","original":{"line":75,"column":17}},{"name":"sequential","generated":{"line":104,"column":22},"source":"index.js","original":{"line":75,"column":20}},{"generated":{"line":104,"column":32},"source":"index.js","original":{"line":75,"column":17}},{"generated":{"line":104,"column":34},"source":"index.js","original":{"line":75,"column":4}},{"generated":{"line":105,"column":0},"source":"index.js","original":{"line":76,"column":4}},{"generated":{"line":105,"column":11},"source":"index.js","original":{"line":76,"column":9}},{"name":"i","generated":{"line":105,"column":15},"source":"index.js","original":{"line":76,"column":13}},{"generated":{"line":105,"column":19},"source":"index.js","original":{"line":76,"column":17}},{"generated":{"line":105,"column":20},"source":"index.js","original":{"line":76,"column":4}},{"name":"i","generated":{"line":105,"column":22},"source":"index.js","original":{"line":76,"column":20}},{"name":"lstmLayerSizes","generated":{"line":105,"column":26},"source":"index.js","original":{"line":76,"column":24}},{"name":"length","generated":{"line":105,"column":41},"source":"index.js","original":{"line":76,"column":39}},{"generated":{"line":105,"column":47},"source":"index.js","original":{"line":76,"column":4}},{"generated":{"line":105,"column":49},"source":"index.js","original":{"line":76,"column":47}},{"name":"i","generated":{"line":105,"column":51},"source":"index.js","original":{"line":76,"column":49}},{"generated":{"line":105,"column":52},"source":"index.js","original":{"line":76,"column":4}},{"generated":{"line":105,"column":54},"source":"index.js","original":{"line":76,"column":52}},{"generated":{"line":106,"column":0},"source":"index.js","original":{"line":77,"column":6}},{"name":"lstmLayerSize","generated":{"line":106,"column":12},"source":"index.js","original":{"line":77,"column":12}},{"name":"lstmLayerSizes","generated":{"line":106,"column":28},"source":"index.js","original":{"line":77,"column":28}},{"name":"i","generated":{"line":106,"column":43},"source":"index.js","original":{"line":77,"column":43}},{"generated":{"line":106,"column":44},"source":"index.js","original":{"line":77,"column":28}},{"generated":{"line":106,"column":45},"source":"index.js","original":{"line":77,"column":6}},{"generated":{"line":107,"column":0},"source":"index.js","original":{"line":78,"column":6}},{"name":"model","generated":{"line":107,"column":13},"source":"index.js","original":{"line":78,"column":11}},{"generated":{"line":107,"column":18},"source":"index.js","original":{"line":78,"column":6}},{"name":"add","generated":{"line":107,"column":19},"source":"index.js","original":{"line":78,"column":17}},{"generated":{"line":107,"column":22},"source":"index.js","original":{"line":78,"column":6}},{"name":"tf","generated":{"line":107,"column":23},"source":"index.js","original":{"line":78,"column":21}},{"name":"layers","generated":{"line":107,"column":26},"source":"index.js","original":{"line":78,"column":24}},{"generated":{"line":107,"column":32},"source":"index.js","original":{"line":78,"column":21}},{"name":"lstm","generated":{"line":107,"column":33},"source":"index.js","original":{"line":78,"column":31}},{"generated":{"line":107,"column":37},"source":"index.js","original":{"line":78,"column":21}},{"generated":{"line":107,"column":38},"source":"index.js","original":{"line":78,"column":36}},{"name":"units","generated":{"line":108,"column":0},"source":"index.js","original":{"line":79,"column":8}},{"name":"lstmLayerSize","generated":{"line":108,"column":17},"source":"index.js","original":{"line":79,"column":15}},{"generated":{"line":108,"column":30},"source":"index.js","original":{"line":78,"column":36}},{"name":"returnSequences","generated":{"line":109,"column":0},"source":"index.js","original":{"line":80,"column":8}},{"name":"i","generated":{"line":109,"column":27},"source":"index.js","original":{"line":80,"column":25}},{"name":"lstmLayerSizes","generated":{"line":109,"column":31},"source":"index.js","original":{"line":80,"column":29}},{"name":"length","generated":{"line":109,"column":46},"source":"index.js","original":{"line":80,"column":44}},{"generated":{"line":109,"column":52},"source":"index.js","original":{"line":80,"column":29}},{"generated":{"line":109,"column":55},"source":"index.js","original":{"line":80,"column":53}},{"generated":{"line":109,"column":56},"source":"index.js","original":{"line":78,"column":36}},{"name":"inputShape","generated":{"line":110,"column":0},"source":"index.js","original":{"line":81,"column":8}},{"name":"i","generated":{"line":110,"column":22},"source":"index.js","original":{"line":81,"column":20}},{"generated":{"line":110,"column":28},"source":"index.js","original":{"line":81,"column":26}},{"generated":{"line":110,"column":29},"source":"index.js","original":{"line":81,"column":20}},{"generated":{"line":110,"column":32},"source":"index.js","original":{"line":81,"column":30}},{"generated":{"line":110,"column":33},"source":"index.js","original":{"line":81,"column":31}},{"name":"sampleLen_","generated":{"line":110,"column":38},"source":"index.js","original":{"line":81,"column":36}},{"generated":{"line":110,"column":48},"source":"index.js","original":{"line":81,"column":30}},{"generated":{"line":110,"column":50},"source":"index.js","original":{"line":81,"column":48}},{"name":"charSetSize_","generated":{"line":110,"column":55},"source":"index.js","original":{"line":81,"column":53}},{"generated":{"line":110,"column":67},"source":"index.js","original":{"line":81,"column":30}},{"generated":{"line":110,"column":68},"source":"index.js","original":{"line":81,"column":20}},{"name":"undefined","generated":{"line":110,"column":71},"source":"index.js","original":{"line":81,"column":69}},{"generated":{"line":111,"column":0},"source":"index.js","original":{"line":78,"column":36}},{"generated":{"line":111,"column":9},"source":"index.js","original":{"line":78,"column":21}},{"generated":{"line":111,"column":10},"source":"index.js","original":{"line":78,"column":6}},{"generated":{"line":112,"column":0},"source":"index.js","original":{"line":83,"column":5}},{"generated":{"line":113,"column":0},"source":"index.js","original":{"line":84,"column":4}},{"name":"model","generated":{"line":113,"column":11},"source":"index.js","original":{"line":84,"column":9}},{"generated":{"line":113,"column":16},"source":"index.js","original":{"line":84,"column":4}},{"name":"add","generated":{"line":113,"column":17},"source":"index.js","original":{"line":84,"column":15}},{"generated":{"line":113,"column":20},"source":"index.js","original":{"line":84,"column":4}},{"name":"tf","generated":{"line":113,"column":21},"source":"index.js","original":{"line":85,"column":6}},{"name":"layers","generated":{"line":113,"column":24},"source":"index.js","original":{"line":85,"column":9}},{"generated":{"line":113,"column":30},"source":"index.js","original":{"line":85,"column":6}},{"name":"dense","generated":{"line":113,"column":31},"source":"index.js","original":{"line":85,"column":16}},{"generated":{"line":113,"column":36},"source":"index.js","original":{"line":85,"column":6}},{"generated":{"line":113,"column":37},"source":"index.js","original":{"line":85,"column":22}},{"name":"units","generated":{"line":113,"column":39},"source":"index.js","original":{"line":85,"column":24}},{"generated":{"line":113,"column":46},"source":"index.js","original":{"line":85,"column":31}},{"name":"charSetSize_","generated":{"line":113,"column":51},"source":"index.js","original":{"line":85,"column":36}},{"generated":{"line":113,"column":63},"source":"index.js","original":{"line":85,"column":22}},{"name":"activation","generated":{"line":113,"column":65},"source":"index.js","original":{"line":85,"column":50}},{"generated":{"line":113,"column":77},"source":"index.js","original":{"line":85,"column":62}},{"generated":{"line":113,"column":86},"source":"index.js","original":{"line":85,"column":22}},{"generated":{"line":113,"column":88},"source":"index.js","original":{"line":85,"column":6}},{"generated":{"line":113,"column":89},"source":"index.js","original":{"line":84,"column":4}},{"generated":{"line":114,"column":0},"source":"index.js","original":{"line":86,"column":3}},{"generated":{"line":116,"column":0},"source":"index.js","original":{"line":88,"column":2}},{"name":"learningRate","generated":{"line":124,"column":33},"source":"index.js","original":{"line":93,"column":15}},{"generated":{"line":124,"column":47},"source":"index.js","original":{"line":93,"column":29}},{"generated":{"line":125,"column":0},"source":"index.js","original":{"line":94,"column":4}},{"name":"optimizer","generated":{"line":125,"column":10},"source":"index.js","original":{"line":94,"column":10}},{"name":"tf","generated":{"line":125,"column":22},"source":"index.js","original":{"line":94,"column":22}},{"name":"train","generated":{"line":125,"column":25},"source":"index.js","original":{"line":94,"column":25}},{"generated":{"line":125,"column":30},"source":"index.js","original":{"line":94,"column":22}},{"name":"rmsprop","generated":{"line":125,"column":31},"source":"index.js","original":{"line":94,"column":31}},{"generated":{"line":125,"column":38},"source":"index.js","original":{"line":94,"column":22}},{"name":"learningRate","generated":{"line":125,"column":39},"source":"index.js","original":{"line":94,"column":39}},{"generated":{"line":125,"column":51},"source":"index.js","original":{"line":94,"column":22}},{"generated":{"line":125,"column":52},"source":"index.js","original":{"line":94,"column":4}},{"generated":{"line":126,"column":0},"source":"index.js","original":{"line":95,"column":4}},{"name":"model","generated":{"line":126,"column":11},"source":"index.js","original":{"line":95,"column":9}},{"generated":{"line":126,"column":16},"source":"index.js","original":{"line":95,"column":4}},{"name":"compile","generated":{"line":126,"column":17},"source":"index.js","original":{"line":95,"column":15}},{"generated":{"line":126,"column":24},"source":"index.js","original":{"line":95,"column":4}},{"generated":{"line":126,"column":25},"source":"index.js","original":{"line":95,"column":23}},{"name":"optimizer","generated":{"line":126,"column":27},"source":"index.js","original":{"line":95,"column":25}},{"name":"optimizer","generated":{"line":126,"column":38},"source":"index.js","original":{"line":95,"column":36}},{"generated":{"line":126,"column":47},"source":"index.js","original":{"line":95,"column":23}},{"name":"loss","generated":{"line":126,"column":49},"source":"index.js","original":{"line":95,"column":47}},{"generated":{"line":126,"column":55},"source":"index.js","original":{"line":95,"column":53}},{"generated":{"line":126,"column":80},"source":"index.js","original":{"line":95,"column":23}},{"generated":{"line":126,"column":82},"source":"index.js","original":{"line":95,"column":4}},{"name":"console","generated":{"line":127,"column":0},"source":"index.js","original":{"line":96,"column":4}},{"name":"log","generated":{"line":127,"column":14},"source":"index.js","original":{"line":96,"column":12}},{"generated":{"line":127,"column":17},"source":"index.js","original":{"line":96,"column":4}},{"name":"learningRate","generated":{"line":127,"column":57},"source":"index.js","original":{"line":96,"column":53}},{"generated":{"line":127,"column":69},"source":"index.js","original":{"line":96,"column":4}},{"generated":{"line":128,"column":0},"source":"index.js","original":{"line":97,"column":4}},{"name":"model","generated":{"line":128,"column":11},"source":"index.js","original":{"line":97,"column":9}},{"generated":{"line":128,"column":16},"source":"index.js","original":{"line":97,"column":4}},{"name":"summary","generated":{"line":128,"column":17},"source":"index.js","original":{"line":97,"column":15}},{"generated":{"line":128,"column":24},"source":"index.js","original":{"line":97,"column":4}},{"generated":{"line":129,"column":0},"source":"index.js","original":{"line":98,"column":3}},{"generated":{"line":131,"column":0},"source":"index.js","original":{"line":100,"column":2}},{"name":"numEpochs","generated":{"line":145,"column":91},"source":"index.js","original":{"line":110,"column":17}},{"name":"examplesPerEpoch","generated":{"line":145,"column":102},"source":"index.js","original":{"line":110,"column":28}},{"name":"batchSize","generated":{"line":145,"column":120},"source":"index.js","original":{"line":110,"column":46}},{"name":"validationSplit","generated":{"line":145,"column":131},"source":"index.js","original":{"line":110,"column":57}},{"name":"batchCount","generated":{"line":154,"column":0},"source":"index.js","original":{"line":111,"column":8}},{"generated":{"line":154,"column":29},"source":"index.js","original":{"line":111,"column":21}},{"name":"batchesPerEpoch","generated":{"line":155,"column":0},"source":"index.js","original":{"line":112,"column":10}},{"name":"examplesPerEpoch","generated":{"line":155,"column":34},"source":"index.js","original":{"line":112,"column":28}},{"name":"batchSize","generated":{"line":155,"column":53},"source":"index.js","original":{"line":112,"column":47}},{"name":"totalBatches","generated":{"line":156,"column":0},"source":"index.js","original":{"line":113,"column":10}},{"name":"numEpochs","generated":{"line":156,"column":31},"source":"index.js","original":{"line":113,"column":25}},{"name":"batchesPerEpoch","generated":{"line":156,"column":43},"source":"index.js","original":{"line":113,"column":37}},{"generated":{"line":159,"column":0},"source":"index.js","original":{"line":115,"column":4}},{"name":"tf","generated":{"line":161,"column":23},"source":"index.js","original":{"line":116,"column":10}},{"name":"nextFrame","generated":{"line":161,"column":26},"source":"index.js","original":{"line":116,"column":13}},{"generated":{"line":161,"column":35},"source":"index.js","original":{"line":116,"column":10}},{"name":"t","generated":{"line":164,"column":0},"source":"index.js","original":{"line":118,"column":8}},{"generated":{"line":164,"column":20},"source":"index.js","original":{"line":118,"column":12}},{"name":"Date","generated":{"line":164,"column":24},"source":"index.js","original":{"line":118,"column":16}},{"generated":{"line":164,"column":28},"source":"index.js","original":{"line":118,"column":12}},{"name":"getTime","generated":{"line":164,"column":31},"source":"index.js","original":{"line":118,"column":23}},{"generated":{"line":164,"column":38},"source":"index.js","original":{"line":118,"column":12}},{"name":"i","generated":{"line":165,"column":0},"source":"index.js","original":{"line":119,"column":13}},{"generated":{"line":165,"column":20},"source":"index.js","original":{"line":119,"column":17}},{"name":"i","generated":{"line":168,"column":22},"source":"index.js","original":{"line":119,"column":20}},{"name":"numEpochs","generated":{"line":168,"column":26},"source":"index.js","original":{"line":119,"column":24}},{"generated":{"line":173,"column":40},"source":"index.js","original":{"line":120,"column":23}},{"name":"textData_","generated":{"line":173,"column":45},"source":"index.js","original":{"line":120,"column":28}},{"generated":{"line":173,"column":54},"source":"index.js","original":{"line":120,"column":23}},{"name":"nextDataEpoch","generated":{"line":173,"column":55},"source":"index.js","original":{"line":120,"column":38}},{"generated":{"line":173,"column":68},"source":"index.js","original":{"line":120,"column":23}},{"name":"examplesPerEpoch","generated":{"line":173,"column":69},"source":"index.js","original":{"line":120,"column":52}},{"generated":{"line":173,"column":85},"source":"index.js","original":{"line":120,"column":23}},{"name":"xs","generated":{"line":173,"column":155},"source":"index.js","original":{"line":120,"column":13}},{"name":"ys","generated":{"line":173,"column":187},"source":"index.js","original":{"line":120,"column":17}},{"generated":{"line":175,"column":23},"source":"index.js","original":{"line":121,"column":12}},{"name":"model","generated":{"line":175,"column":28},"source":"index.js","original":{"line":121,"column":17}},{"generated":{"line":175,"column":33},"source":"index.js","original":{"line":121,"column":12}},{"name":"fit","generated":{"line":175,"column":34},"source":"index.js","original":{"line":121,"column":23}},{"generated":{"line":175,"column":37},"source":"index.js","original":{"line":121,"column":12}},{"name":"xs","generated":{"line":175,"column":38},"source":"index.js","original":{"line":121,"column":27}},{"generated":{"line":175,"column":40},"source":"index.js","original":{"line":121,"column":12}},{"name":"ys","generated":{"line":175,"column":42},"source":"index.js","original":{"line":121,"column":31}},{"generated":{"line":175,"column":44},"source":"index.js","original":{"line":121,"column":12}},{"generated":{"line":175,"column":46},"source":"index.js","original":{"line":121,"column":35}},{"name":"epochs","generated":{"line":176,"column":0},"source":"index.js","original":{"line":122,"column":8}},{"generated":{"line":176,"column":26},"source":"index.js","original":{"line":122,"column":16}},{"generated":{"line":176,"column":27},"source":"index.js","original":{"line":121,"column":35}},{"name":"batchSize","generated":{"line":177,"column":0},"source":"index.js","original":{"line":123,"column":8}},{"name":"batchSize","generated":{"line":177,"column":29},"source":"index.js","original":{"line":123,"column":19}},{"generated":{"line":177,"column":38},"source":"index.js","original":{"line":121,"column":35}},{"name":"validationSplit","generated":{"line":178,"column":0},"source":"index.js","original":{"line":124,"column":8}},{"generated":{"line":178,"column":50},"source":"index.js","original":{"line":121,"column":35}},{"name":"callbacks","generated":{"line":179,"column":0},"source":"index.js","original":{"line":125,"column":8}},{"generated":{"line":179,"column":29},"source":"index.js","original":{"line":125,"column":19}},{"name":"onBatchEnd","generated":{"line":180,"column":0},"source":"index.js","original":{"line":126,"column":10}},{"generated":{"line":181,"column":0},"source":"index.js","original":{"line":126,"column":10}},{"generated":{"line":181,"column":90},"source":"index.js","original":{"line":126,"column":22}},{"name":"batch","generated":{"line":181,"column":107},"source":"index.js","original":{"line":126,"column":29}},{"generated":{"line":181,"column":112},"source":"index.js","original":{"line":126,"column":22}},{"name":"logs","generated":{"line":181,"column":114},"source":"index.js","original":{"line":126,"column":36}},{"generated":{"line":181,"column":118},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":182,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":183,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":184,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":185,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":186,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":187,"column":0},"source":"index.js","original":{"line":127,"column":12}},{"generated":{"line":188,"column":0},"source":"index.js","original":{"line":128,"column":12}},{"name":"t1","generated":{"line":189,"column":0},"source":"index.js","original":{"line":129,"column":18}},{"generated":{"line":189,"column":34},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":189,"column":37},"source":"index.js","original":{"line":129,"column":23}},{"name":"Date","generated":{"line":189,"column":41},"source":"index.js","original":{"line":129,"column":27}},{"generated":{"line":189,"column":45},"source":"index.js","original":{"line":129,"column":23}},{"name":"getTime","generated":{"line":189,"column":48},"source":"index.js","original":{"line":129,"column":34}},{"generated":{"line":189,"column":55},"source":"index.js","original":{"line":129,"column":23}},{"generated":{"line":189,"column":57},"source":"index.js","original":{"line":126,"column":22}},{"name":"examplesPerSec","generated":{"line":190,"column":0},"source":"index.js","original":{"line":130,"column":18}},{"generated":{"line":190,"column":46},"source":"index.js","original":{"line":126,"column":22}},{"name":"batchSize","generated":{"line":190,"column":49},"source":"index.js","original":{"line":130,"column":35}},{"generated":{"line":190,"column":62},"source":"index.js","original":{"line":130,"column":48}},{"name":"t1","generated":{"line":190,"column":63},"source":"index.js","original":{"line":130,"column":49}},{"name":"t","generated":{"line":190,"column":68},"source":"index.js","original":{"line":130,"column":54}},{"generated":{"line":190,"column":69},"source":"index.js","original":{"line":130,"column":48}},{"generated":{"line":190,"column":73},"source":"index.js","original":{"line":130,"column":59}},{"generated":{"line":190,"column":76},"source":"index.js","original":{"line":130,"column":35}},{"generated":{"line":190,"column":77},"source":"index.js","original":{"line":126,"column":22}},{"name":"t","generated":{"line":192,"column":0},"source":"index.js","original":{"line":131,"column":12}},{"name":"t1","generated":{"line":192,"column":36},"source":"index.js","original":{"line":131,"column":16}},{"generated":{"line":192,"column":38},"source":"index.js","original":{"line":131,"column":12}},{"generated":{"line":193,"column":0},"source":"index.js","original":{"line":132,"column":12}},{"name":"logs","generated":{"line":193,"column":57},"source":"index.js","original":{"line":133,"column":14}},{"name":"loss","generated":{"line":193,"column":62},"source":"index.js","original":{"line":133,"column":19}},{"generated":{"line":193,"column":66},"source":"index.js","original":{"line":132,"column":12}},{"generated":{"line":193,"column":68},"source":"index.js","original":{"line":133,"column":25}},{"name":"batchCount","generated":{"line":193,"column":70},"source":"index.js","original":{"line":133,"column":27}},{"generated":{"line":193,"column":80},"source":"index.js","original":{"line":133,"column":25}},{"name":"totalBatches","generated":{"line":193,"column":83},"source":"index.js","original":{"line":133,"column":40}},{"generated":{"line":193,"column":95},"source":"index.js","original":{"line":132,"column":12}},{"name":"examplesPerSec","generated":{"line":193,"column":97},"source":"index.js","original":{"line":133,"column":54}},{"generated":{"line":193,"column":111},"source":"index.js","original":{"line":132,"column":12}},{"generated":{"line":195,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":196,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":197,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":198,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":199,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":200,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":201,"column":0},"source":"index.js","original":{"line":126,"column":22}},{"generated":{"line":201,"column":23},"source":"index.js","original":{"line":126,"column":10}},{"generated":{"line":203,"column":0},"source":"index.js","original":{"line":126,"column":10}},{"generated":{"line":204,"column":0},"source":"index.js","original":{"line":126,"column":10}},{"generated":{"line":205,"column":0},"source":"index.js","original":{"line":126,"column":10}},{"generated":{"line":207,"column":0},"source":"index.js","original":{"line":126,"column":10}},{"generated":{"line":208,"column":0},"source":"index.js","original":{"line":126,"column":10}},{"generated":{"line":208,"column":23},"source":"index.js","original":{"line":125,"column":19}},{"name":"onEpochEnd","generated":{"line":209,"column":0},"source":"index.js","original":{"line":135,"column":10}},{"generated":{"line":210,"column":0},"source":"index.js","original":{"line":135,"column":10}},{"generated":{"line":210,"column":90},"source":"index.js","original":{"line":135,"column":22}},{"name":"epoch","generated":{"line":210,"column":108},"source":"index.js","original":{"line":135,"column":29}},{"generated":{"line":210,"column":113},"source":"index.js","original":{"line":135,"column":22}},{"name":"logs","generated":{"line":210,"column":115},"source":"index.js","original":{"line":135,"column":36}},{"generated":{"line":210,"column":119},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":211,"column":0},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":212,"column":0},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":213,"column":0},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":214,"column":0},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":215,"column":0},"source":"index.js","original":{"line":136,"column":12}},{"name":"logs","generated":{"line":215,"column":57},"source":"index.js","original":{"line":136,"column":28}},{"name":"val_loss","generated":{"line":215,"column":62},"source":"index.js","original":{"line":136,"column":33}},{"generated":{"line":215,"column":70},"source":"index.js","original":{"line":136,"column":12}},{"generated":{"line":217,"column":0},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":218,"column":0},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":219,"column":0},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":220,"column":0},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":221,"column":0},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":222,"column":0},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":223,"column":0},"source":"index.js","original":{"line":135,"column":22}},{"generated":{"line":223,"column":23},"source":"index.js","original":{"line":135,"column":10}},{"generated":{"line":225,"column":0},"source":"index.js","original":{"line":135,"column":10}},{"generated":{"line":226,"column":0},"source":"index.js","original":{"line":135,"column":10}},{"generated":{"line":227,"column":0},"source":"index.js","original":{"line":135,"column":10}},{"generated":{"line":229,"column":0},"source":"index.js","original":{"line":135,"column":10}},{"generated":{"line":230,"column":0},"source":"index.js","original":{"line":135,"column":10}},{"generated":{"line":231,"column":0},"source":"index.js","original":{"line":125,"column":19}},{"generated":{"line":232,"column":0},"source":"index.js","original":{"line":121,"column":35}},{"generated":{"line":232,"column":17},"source":"index.js","original":{"line":121,"column":12}},{"name":"xs","generated":{"line":235,"column":0},"source":"index.js","original":{"line":140,"column":6}},{"name":"dispose","generated":{"line":235,"column":19},"source":"index.js","original":{"line":140,"column":9}},{"generated":{"line":235,"column":26},"source":"index.js","original":{"line":140,"column":6}},{"name":"ys","generated":{"line":236,"column":0},"source":"index.js","original":{"line":141,"column":6}},{"name":"dispose","generated":{"line":236,"column":19},"source":"index.js","original":{"line":141,"column":9}},{"generated":{"line":236,"column":26},"source":"index.js","original":{"line":141,"column":6}},{"generated":{"line":239,"column":0},"source":"index.js","original":{"line":119,"column":35}},{"name":"i","generated":{"line":239,"column":18},"source":"index.js","original":{"line":119,"column":37}},{"generated":{"line":258,"column":0},"source":"index.js","original":{"line":145,"column":2}},{"name":"sentenceIndices","generated":{"line":272,"column":92},"source":"index.js","original":{"line":155,"column":21}},{"name":"length","generated":{"line":272,"column":109},"source":"index.js","original":{"line":155,"column":38}},{"name":"temperature","generated":{"line":272,"column":117},"source":"index.js","original":{"line":155,"column":46}},{"generated":{"line":278,"column":0},"source":"index.js","original":{"line":156,"column":4}},{"name":"temperatureScalar","generated":{"line":279,"column":0},"source":"index.js","original":{"line":157,"column":10}},{"name":"tf","generated":{"line":279,"column":36},"source":"index.js","original":{"line":157,"column":30}},{"name":"scalar","generated":{"line":279,"column":39},"source":"index.js","original":{"line":157,"column":33}},{"generated":{"line":279,"column":45},"source":"index.js","original":{"line":157,"column":30}},{"name":"temperature","generated":{"line":279,"column":46},"source":"index.js","original":{"line":157,"column":40}},{"generated":{"line":279,"column":57},"source":"index.js","original":{"line":157,"column":30}},{"name":"generated","generated":{"line":280,"column":0},"source":"index.js","original":{"line":159,"column":8}},{"generated":{"line":280,"column":28},"source":"index.js","original":{"line":159,"column":20}},{"name":"generated","generated":{"line":283,"column":22},"source":"index.js","original":{"line":160,"column":11}},{"name":"length","generated":{"line":283,"column":32},"source":"index.js","original":{"line":160,"column":21}},{"generated":{"line":283,"column":38},"source":"index.js","original":{"line":160,"column":11}},{"name":"length","generated":{"line":283,"column":41},"source":"index.js","original":{"line":160,"column":30}},{"generated":{"line":288,"column":0},"source":"index.js","original":{"line":161,"column":6}},{"name":"inputBuffer","generated":{"line":289,"column":0},"source":"index.js","original":{"line":162,"column":12}},{"generated":{"line":289,"column":30},"source":"index.js","original":{"line":163,"column":8}},{"name":"tf","generated":{"line":289,"column":34},"source":"index.js","original":{"line":163,"column":12}},{"name":"TensorBuffer","generated":{"line":289,"column":37},"source":"index.js","original":{"line":163,"column":15}},{"generated":{"line":289,"column":49},"source":"index.js","original":{"line":163,"column":8}},{"generated":{"line":289,"column":50},"source":"index.js","original":{"line":163,"column":28}},{"generated":{"line":289,"column":51},"source":"index.js","original":{"line":163,"column":29}},{"generated":{"line":289,"column":52},"source":"index.js","original":{"line":163,"column":28}},{"generated":{"line":289,"column":54},"source":"index.js","original":{"line":163,"column":32}},{"name":"sampleLen_","generated":{"line":289,"column":59},"source":"index.js","original":{"line":163,"column":37}},{"generated":{"line":289,"column":69},"source":"index.js","original":{"line":163,"column":28}},{"generated":{"line":289,"column":71},"source":"index.js","original":{"line":163,"column":49}},{"name":"charSetSize_","generated":{"line":289,"column":76},"source":"index.js","original":{"line":163,"column":54}},{"generated":{"line":289,"column":88},"source":"index.js","original":{"line":163,"column":28}},{"generated":{"line":289,"column":89},"source":"index.js","original":{"line":163,"column":8}},{"generated":{"line":291,"column":0},"source":"index.js","original":{"line":164,"column":6}},{"name":"i","generated":{"line":291,"column":21},"source":"index.js","original":{"line":164,"column":15}},{"generated":{"line":291,"column":22},"source":"index.js","original":{"line":164,"column":6}},{"generated":{"line":291,"column":25},"source":"index.js","original":{"line":164,"column":19}},{"generated":{"line":291,"column":26},"source":"index.js","original":{"line":164,"column":6}},{"name":"i","generated":{"line":291,"column":28},"source":"index.js","original":{"line":164,"column":22}},{"generated":{"line":291,"column":32},"source":"index.js","original":{"line":164,"column":26}},{"name":"sampleLen_","generated":{"line":291,"column":37},"source":"index.js","original":{"line":164,"column":31}},{"generated":{"line":291,"column":47},"source":"index.js","original":{"line":164,"column":6}},{"generated":{"line":291,"column":49},"source":"index.js","original":{"line":164,"column":43}},{"name":"i","generated":{"line":291,"column":51},"source":"index.js","original":{"line":164,"column":45}},{"generated":{"line":291,"column":52},"source":"index.js","original":{"line":164,"column":6}},{"generated":{"line":291,"column":54},"source":"index.js","original":{"line":164,"column":48}},{"name":"inputBuffer","generated":{"line":292,"column":0},"source":"index.js","original":{"line":165,"column":8}},{"name":"set","generated":{"line":292,"column":30},"source":"index.js","original":{"line":165,"column":20}},{"generated":{"line":292,"column":33},"source":"index.js","original":{"line":165,"column":8}},{"generated":{"line":292,"column":34},"source":"index.js","original":{"line":165,"column":24}},{"generated":{"line":292,"column":35},"source":"index.js","original":{"line":165,"column":8}},{"generated":{"line":292,"column":37},"source":"index.js","original":{"line":165,"column":27}},{"generated":{"line":292,"column":38},"source":"index.js","original":{"line":165,"column":8}},{"name":"i","generated":{"line":292,"column":40},"source":"index.js","original":{"line":165,"column":30}},{"generated":{"line":292,"column":41},"source":"index.js","original":{"line":165,"column":8}},{"name":"sentenceIndices","generated":{"line":292,"column":43},"source":"index.js","original":{"line":165,"column":33}},{"name":"i","generated":{"line":292,"column":59},"source":"index.js","original":{"line":165,"column":49}},{"generated":{"line":292,"column":60},"source":"index.js","original":{"line":165,"column":33}},{"generated":{"line":292,"column":61},"source":"index.js","original":{"line":165,"column":8}},{"generated":{"line":293,"column":0},"source":"index.js","original":{"line":166,"column":7}},{"name":"input","generated":{"line":294,"column":0},"source":"index.js","original":{"line":167,"column":12}},{"name":"inputBuffer","generated":{"line":294,"column":24},"source":"index.js","original":{"line":167,"column":20}},{"name":"toTensor","generated":{"line":294,"column":36},"source":"index.js","original":{"line":167,"column":32}},{"generated":{"line":294,"column":44},"source":"index.js","original":{"line":167,"column":20}},{"generated":{"line":296,"column":0},"source":"index.js","original":{"line":169,"column":6}},{"generated":{"line":297,"column":0},"source":"index.js","original":{"line":170,"column":6}},{"name":"output","generated":{"line":299,"column":0},"source":"index.js","original":{"line":171,"column":12}},{"generated":{"line":299,"column":25},"source":"index.js","original":{"line":171,"column":21}},{"name":"model","generated":{"line":299,"column":30},"source":"index.js","original":{"line":171,"column":26}},{"generated":{"line":299,"column":35},"source":"index.js","original":{"line":171,"column":21}},{"name":"predict","generated":{"line":299,"column":36},"source":"index.js","original":{"line":171,"column":32}},{"generated":{"line":299,"column":43},"source":"index.js","original":{"line":171,"column":21}},{"name":"input","generated":{"line":299,"column":44},"source":"index.js","original":{"line":171,"column":40}},{"generated":{"line":299,"column":49},"source":"index.js","original":{"line":171,"column":21}},{"generated":{"line":301,"column":0},"source":"index.js","original":{"line":173,"column":6}},{"name":"winnerIndex","generated":{"line":303,"column":0},"source":"index.js","original":{"line":174,"column":12}},{"generated":{"line":303,"column":30},"source":"index.js","original":{"line":174,"column":26}},{"name":"tf","generated":{"line":303,"column":49},"source":"index.js","original":{"line":174,"column":33}},{"name":"squeeze","generated":{"line":303,"column":52},"source":"index.js","original":{"line":174,"column":36}},{"generated":{"line":303,"column":59},"source":"index.js","original":{"line":174,"column":33}},{"name":"output","generated":{"line":303,"column":60},"source":"index.js","original":{"line":174,"column":44}},{"generated":{"line":303,"column":66},"source":"index.js","original":{"line":174,"column":33}},{"generated":{"line":303,"column":67},"source":"index.js","original":{"line":174,"column":26}},{"name":"temperatureScalar","generated":{"line":303,"column":69},"source":"index.js","original":{"line":174,"column":53}},{"generated":{"line":303,"column":86},"source":"index.js","original":{"line":174,"column":26}},{"name":"winnerChar","generated":{"line":304,"column":0},"source":"index.js","original":{"line":175,"column":12}},{"generated":{"line":304,"column":29},"source":"index.js","original":{"line":175,"column":25}},{"name":"textData_","generated":{"line":304,"column":34},"source":"index.js","original":{"line":175,"column":30}},{"generated":{"line":304,"column":43},"source":"index.js","original":{"line":175,"column":25}},{"name":"getFromCharSet","generated":{"line":304,"column":44},"source":"index.js","original":{"line":175,"column":40}},{"generated":{"line":304,"column":58},"source":"index.js","original":{"line":175,"column":25}},{"name":"winnerIndex","generated":{"line":304,"column":59},"source":"index.js","original":{"line":175,"column":55}},{"generated":{"line":304,"column":70},"source":"index.js","original":{"line":175,"column":25}},{"generated":{"line":306,"column":23},"source":"index.js","original":{"line":176,"column":12}},{"name":"winnerChar","generated":{"line":306,"column":53},"source":"index.js","original":{"line":176,"column":33}},{"generated":{"line":306,"column":63},"source":"index.js","original":{"line":176,"column":12}},{"name":"generated","generated":{"line":310,"column":0},"source":"index.js","original":{"line":178,"column":6}},{"name":"winnerChar","generated":{"line":310,"column":29},"source":"index.js","original":{"line":178,"column":19}},{"generated":{"line":310,"column":39},"source":"index.js","original":{"line":178,"column":6}},{"name":"sentenceIndices","generated":{"line":311,"column":0},"source":"index.js","original":{"line":179,"column":6}},{"name":"sentenceIndices","generated":{"line":311,"column":34},"source":"index.js","original":{"line":179,"column":24}},{"name":"slice","generated":{"line":311,"column":50},"source":"index.js","original":{"line":179,"column":40}},{"generated":{"line":311,"column":55},"source":"index.js","original":{"line":179,"column":24}},{"generated":{"line":311,"column":56},"source":"index.js","original":{"line":179,"column":46}},{"generated":{"line":311,"column":57},"source":"index.js","original":{"line":179,"column":24}},{"generated":{"line":311,"column":58},"source":"index.js","original":{"line":179,"column":6}},{"name":"sentenceIndices","generated":{"line":312,"column":0},"source":"index.js","original":{"line":180,"column":6}},{"name":"push","generated":{"line":312,"column":32},"source":"index.js","original":{"line":180,"column":22}},{"generated":{"line":312,"column":36},"source":"index.js","original":{"line":180,"column":6}},{"name":"winnerIndex","generated":{"line":312,"column":37},"source":"index.js","original":{"line":180,"column":27}},{"generated":{"line":312,"column":48},"source":"index.js","original":{"line":180,"column":6}},{"name":"input","generated":{"line":314,"column":0},"source":"index.js","original":{"line":182,"column":6}},{"name":"dispose","generated":{"line":314,"column":22},"source":"index.js","original":{"line":182,"column":12}},{"generated":{"line":314,"column":29},"source":"index.js","original":{"line":182,"column":6}},{"name":"output","generated":{"line":315,"column":0},"source":"index.js","original":{"line":183,"column":6}},{"name":"dispose","generated":{"line":315,"column":23},"source":"index.js","original":{"line":183,"column":13}},{"generated":{"line":315,"column":30},"source":"index.js","original":{"line":183,"column":6}},{"name":"temperatureScalar","generated":{"line":320,"column":0},"source":"index.js","original":{"line":185,"column":4}},{"name":"dispose","generated":{"line":320,"column":34},"source":"index.js","original":{"line":185,"column":22}},{"generated":{"line":320,"column":41},"source":"index.js","original":{"line":185,"column":4}},{"name":"generated","generated":{"line":321,"column":50},"source":"index.js","original":{"line":186,"column":11}},{"generated":{"line":342,"column":0},"source":"index.js","original":{"line":188,"column":1}},{"generated":{"line":344,"column":0},"source":"index.js","original":{"line":190,"column":0}},{"name":"SaveableLSTMTextGenerator","generated":{"line":350,"column":4},"source":"index.js","original":{"line":195,"column":13}},{"name":"SaveableLSTMTextGenerator","generated":{"line":350,"column":40},"source":"index.js","original":{"line":195,"column":13}},{"generated":{"line":353,"column":0},"source":"index.js","original":{"line":196,"column":2}},{"generated":{"line":358,"column":0},"source":"index.js","original":{"line":201,"column":2}},{"name":"textData","generated":{"line":358,"column":37},"source":"index.js","original":{"line":201,"column":14}},{"generated":{"line":358,"column":45},"source":"index.js","original":{"line":201,"column":2}},{"generated":{"line":358,"column":47},"source":"index.js","original":{"line":201,"column":24}},{"generated":{"line":359,"column":0},"source":"index.js","original":{"line":201,"column":24}},{"generated":{"line":361,"column":0},"source":"index.js","original":{"line":201,"column":24}},{"name":"textData","generated":{"line":361,"column":151},"source":"index.js","original":{"line":202,"column":10}},{"generated":{"line":361,"column":159},"source":"index.js","original":{"line":201,"column":24}},{"generated":{"line":363,"column":0},"source":"index.js","original":{"line":203,"column":4}},{"name":"modelIdentifier_","generated":{"line":363,"column":11},"source":"index.js","original":{"line":203,"column":9}},{"generated":{"line":363,"column":27},"source":"index.js","original":{"line":203,"column":4}},{"name":"textData","generated":{"line":363,"column":30},"source":"index.js","original":{"line":203,"column":28}},{"name":"dataIdentifier","generated":{"line":363,"column":39},"source":"index.js","original":{"line":203,"column":37}},{"generated":{"line":363,"column":53},"source":"index.js","original":{"line":203,"column":28}},{"generated":{"line":363,"column":55},"source":"index.js","original":{"line":203,"column":4}},{"generated":{"line":364,"column":0},"source":"index.js","original":{"line":204,"column":4}},{"name":"MODEL_SAVE_PATH_PREFIX_","generated":{"line":364,"column":11},"source":"index.js","original":{"line":204,"column":9}},{"generated":{"line":364,"column":34},"source":"index.js","original":{"line":204,"column":4}},{"generated":{"line":364,"column":37},"source":"index.js","original":{"line":204,"column":35}},{"generated":{"line":364,"column":71},"source":"index.js","original":{"line":204,"column":4}},{"generated":{"line":365,"column":0},"source":"index.js","original":{"line":205,"column":4}},{"name":"modelSavePath_","generated":{"line":365,"column":11},"source":"index.js","original":{"line":205,"column":9}},{"generated":{"line":365,"column":25},"source":"index.js","original":{"line":205,"column":4}},{"generated":{"line":365,"column":28},"source":"index.js","original":{"line":206,"column":9}},{"name":"MODEL_SAVE_PATH_PREFIX_","generated":{"line":365,"column":35},"source":"index.js","original":{"line":206,"column":14}},{"generated":{"line":365,"column":58},"source":"index.js","original":{"line":205,"column":4}},{"generated":{"line":365,"column":67},"source":"index.js","original":{"line":206,"column":41}},{"name":"modelIdentifier_","generated":{"line":365,"column":74},"source":"index.js","original":{"line":206,"column":46}},{"generated":{"line":365,"column":90},"source":"index.js","original":{"line":205,"column":4}},{"generated":{"line":366,"column":0},"source":"index.js","original":{"line":201,"column":24}},{"generated":{"line":367,"column":0},"source":"index.js","original":{"line":207,"column":3}},{"generated":{"line":369,"column":0},"source":"index.js","original":{"line":209,"column":2}},{"generated":{"line":378,"column":38},"source":"index.js","original":{"line":214,"column":20}},{"generated":{"line":379,"column":0},"source":"index.js","original":{"line":215,"column":4}},{"generated":{"line":379,"column":13},"source":"index.js","original":{"line":215,"column":11}},{"name":"modelIdentifier_","generated":{"line":379,"column":18},"source":"index.js","original":{"line":215,"column":16}},{"generated":{"line":379,"column":34},"source":"index.js","original":{"line":215,"column":4}},{"generated":{"line":380,"column":0},"source":"index.js","original":{"line":216,"column":3}},{"generated":{"line":382,"column":0},"source":"index.js","original":{"line":218,"column":2}},{"name":"lstmLayerSizes","generated":{"line":392,"column":92},"source":"index.js","original":{"line":224,"column":18}},{"name":"tf","generated":{"line":399,"column":23},"source":"index.js","original":{"line":225,"column":29}},{"name":"io","generated":{"line":399,"column":26},"source":"index.js","original":{"line":225,"column":32}},{"generated":{"line":399,"column":28},"source":"index.js","original":{"line":225,"column":29}},{"name":"listModels","generated":{"line":399,"column":29},"source":"index.js","original":{"line":225,"column":35}},{"generated":{"line":399,"column":39},"source":"index.js","original":{"line":225,"column":29}},{"name":"modelsInfo","generated":{"line":402,"column":0},"source":"index.js","original":{"line":225,"column":10}},{"generated":{"line":404,"column":22},"source":"index.js","original":{"line":226,"column":8}},{"name":"modelSavePath_","generated":{"line":404,"column":27},"source":"index.js","original":{"line":226,"column":13}},{"generated":{"line":404,"column":41},"source":"index.js","original":{"line":226,"column":8}},{"name":"modelsInfo","generated":{"line":404,"column":45},"source":"index.js","original":{"line":226,"column":31}},{"name":"console","generated":{"line":409,"column":0},"source":"index.js","original":{"line":227,"column":6}},{"name":"log","generated":{"line":409,"column":24},"source":"index.js","original":{"line":227,"column":14}},{"generated":{"line":409,"column":27},"source":"index.js","original":{"line":227,"column":6}},{"name":"tf","generated":{"line":411,"column":23},"source":"index.js","original":{"line":228,"column":25}},{"name":"loadModel","generated":{"line":411,"column":26},"source":"index.js","original":{"line":228,"column":28}},{"generated":{"line":411,"column":35},"source":"index.js","original":{"line":228,"column":25}},{"generated":{"line":411,"column":36},"source":"index.js","original":{"line":228,"column":38}},{"name":"modelSavePath_","generated":{"line":411,"column":41},"source":"index.js","original":{"line":228,"column":43}},{"generated":{"line":411,"column":55},"source":"index.js","original":{"line":228,"column":25}},{"generated":{"line":414,"column":0},"source":"index.js","original":{"line":228,"column":6}},{"name":"model","generated":{"line":414,"column":21},"source":"index.js","original":{"line":228,"column":11}},{"name":"console","generated":{"line":416,"column":0},"source":"index.js","original":{"line":229,"column":6}},{"name":"log","generated":{"line":416,"column":24},"source":"index.js","original":{"line":229,"column":14}},{"generated":{"line":416,"column":27},"source":"index.js","original":{"line":229,"column":6}},{"generated":{"line":416,"column":51},"source":"index.js","original":{"line":229,"column":39}},{"name":"modelSavePath_","generated":{"line":416,"column":56},"source":"index.js","original":{"line":229,"column":44}},{"generated":{"line":416,"column":70},"source":"index.js","original":{"line":229,"column":6}},{"generated":{"line":421,"column":22},"source":"index.js","original":{"line":231,"column":12}},{"name":"Error","generated":{"line":421,"column":26},"source":"index.js","original":{"line":231,"column":16}},{"generated":{"line":421,"column":31},"source":"index.js","original":{"line":231,"column":12}},{"generated":{"line":421,"column":32},"source":"index.js","original":{"line":232,"column":8}},{"generated":{"line":421,"column":58},"source":"index.js","original":{"line":232,"column":32}},{"name":"modelSavePath_","generated":{"line":421,"column":63},"source":"index.js","original":{"line":232,"column":37}},{"generated":{"line":421,"column":77},"source":"index.js","original":{"line":232,"column":8}},{"generated":{"line":421,"column":117},"source":"index.js","original":{"line":231,"column":12}},{"generated":{"line":438,"column":0},"source":"index.js","original":{"line":237,"column":2}},{"generated":{"line":452,"column":22},"source":"index.js","original":{"line":243,"column":8}},{"name":"model","generated":{"line":452,"column":27},"source":"index.js","original":{"line":243,"column":13}},{"generated":{"line":452,"column":32},"source":"index.js","original":{"line":243,"column":8}},{"generated":{"line":452,"column":36},"source":"index.js","original":{"line":243,"column":22}},{"generated":{"line":457,"column":22},"source":"index.js","original":{"line":244,"column":12}},{"name":"Error","generated":{"line":457,"column":26},"source":"index.js","original":{"line":244,"column":16}},{"generated":{"line":457,"column":31},"source":"index.js","original":{"line":244,"column":12}},{"generated":{"line":457,"column":32},"source":"index.js","original":{"line":244,"column":22}},{"generated":{"line":457,"column":74},"source":"index.js","original":{"line":244,"column":12}},{"generated":{"line":461,"column":23},"source":"index.js","original":{"line":246,"column":19}},{"name":"model","generated":{"line":461,"column":28},"source":"index.js","original":{"line":246,"column":24}},{"generated":{"line":461,"column":33},"source":"index.js","original":{"line":246,"column":19}},{"name":"save","generated":{"line":461,"column":34},"source":"index.js","original":{"line":246,"column":30}},{"generated":{"line":461,"column":38},"source":"index.js","original":{"line":246,"column":19}},{"generated":{"line":461,"column":39},"source":"index.js","original":{"line":246,"column":35}},{"name":"modelSavePath_","generated":{"line":461,"column":44},"source":"index.js","original":{"line":246,"column":40}},{"generated":{"line":461,"column":58},"source":"index.js","original":{"line":246,"column":19}},{"generated":{"line":481,"column":0},"source":"index.js","original":{"line":250,"column":2}},{"generated":{"line":494,"column":23},"source":"index.js","original":{"line":254,"column":14}},{"name":"checkStoredModelStatus","generated":{"line":494,"column":28},"source":"index.js","original":{"line":254,"column":19}},{"generated":{"line":494,"column":50},"source":"index.js","original":{"line":254,"column":14}},{"generated":{"line":499,"column":38},"source":"index.js","original":{"line":254,"column":47}},{"generated":{"line":504,"column":22},"source":"index.js","original":{"line":255,"column":12}},{"name":"Error","generated":{"line":504,"column":26},"source":"index.js","original":{"line":255,"column":16}},{"generated":{"line":504,"column":31},"source":"index.js","original":{"line":255,"column":12}},{"generated":{"line":504,"column":32},"source":"index.js","original":{"line":256,"column":8}},{"generated":{"line":504,"column":94},"source":"index.js","original":{"line":255,"column":12}},{"name":"tf","generated":{"line":508,"column":23},"source":"index.js","original":{"line":258,"column":17}},{"name":"io","generated":{"line":508,"column":26},"source":"index.js","original":{"line":258,"column":20}},{"generated":{"line":508,"column":28},"source":"index.js","original":{"line":258,"column":17}},{"name":"removeModel","generated":{"line":508,"column":29},"source":"index.js","original":{"line":258,"column":23}},{"generated":{"line":508,"column":40},"source":"index.js","original":{"line":258,"column":17}},{"generated":{"line":508,"column":41},"source":"index.js","original":{"line":258,"column":35}},{"name":"modelSavePath_","generated":{"line":508,"column":46},"source":"index.js","original":{"line":258,"column":40}},{"generated":{"line":508,"column":60},"source":"index.js","original":{"line":258,"column":17}},{"generated":{"line":528,"column":0},"source":"index.js","original":{"line":261,"column":2}},{"name":"tf","generated":{"line":545,"column":23},"source":"index.js","original":{"line":268,"column":29}},{"name":"io","generated":{"line":545,"column":26},"source":"index.js","original":{"line":268,"column":32}},{"generated":{"line":545,"column":28},"source":"index.js","original":{"line":268,"column":29}},{"name":"listModels","generated":{"line":545,"column":29},"source":"index.js","original":{"line":268,"column":35}},{"generated":{"line":545,"column":39},"source":"index.js","original":{"line":268,"column":29}},{"name":"modelsInfo","generated":{"line":548,"column":0},"source":"index.js","original":{"line":268,"column":10}},{"name":"modelsInfo","generated":{"line":549,"column":50},"source":"index.js","original":{"line":269,"column":11}},{"generated":{"line":549,"column":61},"source":"index.js","original":{"line":269,"column":22}},{"name":"modelSavePath_","generated":{"line":549,"column":66},"source":"index.js","original":{"line":269,"column":27}},{"generated":{"line":549,"column":80},"source":"index.js","original":{"line":269,"column":11}},{"generated":{"line":566,"column":0},"source":"index.js","original":{"line":272,"column":2}},{"generated":{"line":576,"column":37},"source":"index.js","original":{"line":279,"column":19}},{"generated":{"line":577,"column":0},"source":"index.js","original":{"line":280,"column":4}},{"generated":{"line":577,"column":10},"source":"index.js","original":{"line":280,"column":8}},{"name":"model","generated":{"line":577,"column":15},"source":"index.js","original":{"line":280,"column":13}},{"generated":{"line":577,"column":20},"source":"index.js","original":{"line":280,"column":8}},{"generated":{"line":577,"column":24},"source":"index.js","original":{"line":280,"column":22}},{"generated":{"line":577,"column":28},"source":"index.js","original":{"line":280,"column":4}},{"generated":{"line":577,"column":30},"source":"index.js","original":{"line":280,"column":28}},{"generated":{"line":578,"column":0},"source":"index.js","original":{"line":281,"column":6}},{"generated":{"line":578,"column":14},"source":"index.js","original":{"line":281,"column":12}},{"name":"Error","generated":{"line":578,"column":18},"source":"index.js","original":{"line":281,"column":16}},{"generated":{"line":578,"column":23},"source":"index.js","original":{"line":281,"column":12}},{"generated":{"line":578,"column":24},"source":"index.js","original":{"line":281,"column":22}},{"generated":{"line":578,"column":45},"source":"index.js","original":{"line":281,"column":12}},{"generated":{"line":578,"column":46},"source":"index.js","original":{"line":281,"column":6}},{"generated":{"line":579,"column":0},"source":"index.js","original":{"line":282,"column":5}},{"generated":{"line":580,"column":0},"source":"index.js","original":{"line":283,"column":4}},{"name":"numLSTMLayers","generated":{"line":580,"column":10},"source":"index.js","original":{"line":283,"column":10}},{"generated":{"line":580,"column":26},"source":"index.js","original":{"line":283,"column":26}},{"name":"model","generated":{"line":580,"column":31},"source":"index.js","original":{"line":283,"column":31}},{"generated":{"line":580,"column":36},"source":"index.js","original":{"line":283,"column":26}},{"name":"layers","generated":{"line":580,"column":37},"source":"index.js","original":{"line":283,"column":37}},{"generated":{"line":580,"column":43},"source":"index.js","original":{"line":283,"column":26}},{"name":"length","generated":{"line":580,"column":44},"source":"index.js","original":{"line":283,"column":44}},{"generated":{"line":580,"column":50},"source":"index.js","original":{"line":283,"column":26}},{"generated":{"line":580,"column":53},"source":"index.js","original":{"line":283,"column":53}},{"generated":{"line":580,"column":54},"source":"index.js","original":{"line":283,"column":4}},{"generated":{"line":581,"column":0},"source":"index.js","original":{"line":284,"column":4}},{"name":"layerSizes","generated":{"line":581,"column":10},"source":"index.js","original":{"line":284,"column":10}},{"generated":{"line":581,"column":23},"source":"index.js","original":{"line":284,"column":23}},{"generated":{"line":581,"column":25},"source":"index.js","original":{"line":284,"column":4}},{"generated":{"line":582,"column":0},"source":"index.js","original":{"line":285,"column":4}},{"generated":{"line":582,"column":11},"source":"index.js","original":{"line":285,"column":9}},{"name":"i","generated":{"line":582,"column":15},"source":"index.js","original":{"line":285,"column":13}},{"generated":{"line":582,"column":19},"source":"index.js","original":{"line":285,"column":17}},{"generated":{"line":582,"column":20},"source":"index.js","original":{"line":285,"column":4}},{"name":"i","generated":{"line":582,"column":22},"source":"index.js","original":{"line":285,"column":20}},{"name":"numLSTMLayers","generated":{"line":582,"column":26},"source":"index.js","original":{"line":285,"column":24}},{"generated":{"line":582,"column":39},"source":"index.js","original":{"line":285,"column":4}},{"generated":{"line":582,"column":41},"source":"index.js","original":{"line":285,"column":39}},{"name":"i","generated":{"line":582,"column":43},"source":"index.js","original":{"line":285,"column":41}},{"generated":{"line":582,"column":44},"source":"index.js","original":{"line":285,"column":4}},{"generated":{"line":582,"column":46},"source":"index.js","original":{"line":285,"column":44}},{"name":"layerSizes","generated":{"line":583,"column":0},"source":"index.js","original":{"line":286,"column":6}},{"name":"push","generated":{"line":583,"column":19},"source":"index.js","original":{"line":286,"column":17}},{"generated":{"line":583,"column":23},"source":"index.js","original":{"line":286,"column":6}},{"generated":{"line":583,"column":24},"source":"index.js","original":{"line":286,"column":22}},{"name":"model","generated":{"line":583,"column":29},"source":"index.js","original":{"line":286,"column":27}},{"generated":{"line":583,"column":34},"source":"index.js","original":{"line":286,"column":22}},{"name":"layers","generated":{"line":583,"column":35},"source":"index.js","original":{"line":286,"column":33}},{"generated":{"line":583,"column":41},"source":"index.js","original":{"line":286,"column":22}},{"name":"i","generated":{"line":583,"column":42},"source":"index.js","original":{"line":286,"column":40}},{"generated":{"line":583,"column":43},"source":"index.js","original":{"line":286,"column":22}},{"name":"units","generated":{"line":583,"column":45},"source":"index.js","original":{"line":286,"column":43}},{"generated":{"line":583,"column":50},"source":"index.js","original":{"line":286,"column":6}},{"generated":{"line":584,"column":0},"source":"index.js","original":{"line":287,"column":5}},{"generated":{"line":585,"column":0},"source":"index.js","original":{"line":288,"column":4}},{"name":"layerSizes","generated":{"line":585,"column":13},"source":"index.js","original":{"line":288,"column":11}},{"name":"length","generated":{"line":585,"column":24},"source":"index.js","original":{"line":288,"column":22}},{"generated":{"line":585,"column":30},"source":"index.js","original":{"line":288,"column":11}},{"generated":{"line":585,"column":35},"source":"index.js","original":{"line":288,"column":33}},{"generated":{"line":585,"column":36},"source":"index.js","original":{"line":288,"column":11}},{"name":"layerSizes","generated":{"line":585,"column":39},"source":"index.js","original":{"line":288,"column":37}},{"generated":{"line":585,"column":50},"source":"index.js","original":{"line":288,"column":48}},{"generated":{"line":585,"column":51},"source":"index.js","original":{"line":288,"column":37}},{"generated":{"line":585,"column":52},"source":"index.js","original":{"line":288,"column":11}},{"name":"layerSizes","generated":{"line":585,"column":55},"source":"index.js","original":{"line":288,"column":53}},{"generated":{"line":585,"column":65},"source":"index.js","original":{"line":288,"column":4}},{"generated":{"line":586,"column":0},"source":"index.js","original":{"line":289,"column":3}},{"name":"LSTMTextGenerator","generated":{"line":590,"column":2},"source":"index.js","original":{"line":195,"column":47}},{"generated":{"line":592,"column":0},"source":"index.js","original":{"line":292,"column":0}}],"sources":{"index.js":"// this file is key = create model - train it - save it in user's browser \n// can be twitched : activation type in a layer - type of optimizer - loss category - learning rate - \n//  also in Fit Model: numEpochs, examplesPerEpoch, batchSize, validationSplit\n//  in Generate Text : sentenceIndices (Seed sentence), length (num of characters in generated text), Temperature (needs to be >0) \n// We need to save our model once created and make it useable for our app : reconsider saveModel, removeModel, checkStoredModelStatus\n\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Example: LSTM Text Generation.\n *\n * Inspiration comes from:\n *\n * -\n * https://github.com/keras-team/keras/blob/master/examples/lstm_text_generation.py\n * - Andrej Karpathy. \"The Unreasonable Effectiveness of Recurrent Neural\n * Networks\" http://karpathy.github.io/2015/05/21/rnn-effectiveness/\n */\n\nimport * as tf from '@tensorflow/tfjs';\n\nimport { TextData } from './data';\nimport { onTextGenerationBegin, onTextGenerationChar, onTrainBatchEnd, onTrainBegin, onTrainEpochEnd, setUpUI } from './ai';\nimport { sample } from './utils';\n\n/**\n * Class that manages LSTM-based text generation.\n *\n * This class manages the following:\n *\n * - Creating and training a LSTM model, written with the tf.layers API, to\n *   predict the next character given a sequence of input characters.\n * - Generating random text using the LSTM model.\n */\nexport class LSTMTextGenerator {\n  /**\n   * Constructor of NeuralNetworkTextGenerator.\n   *\n   * @param {TextData} textData An instance of `TextData`.\n   */\n  constructor(textData) {\n    this.textData_ = textData;\n    this.charSetSize_ = textData.charSetSize();\n    this.sampleLen_ = textData.sampleLen();\n    this.textLen_ = textData.textLen();\n  }\n\n  /**\n   * Create LSTM model from scratch.\n   *\n   * @param {number | number[]} lstmLayerSizes Sizes of the LSTM layers, as a\n   *   number or an non-empty array of numbers.\n   */\n  createModel(lstmLayerSizes) {\n    if (!Array.isArray(lstmLayerSizes)) {\n      lstmLayerSizes = [lstmLayerSizes];\n    }\n\n    this.model = tf.sequential();\n    for (let i = 0; i < lstmLayerSizes.length; ++i) {\n      const lstmLayerSize = lstmLayerSizes[i];\n      this.model.add(tf.layers.lstm({\n        units: lstmLayerSize,\n        returnSequences: i < lstmLayerSizes.length - 1,\n        inputShape: i === 0 ? [this.sampleLen_, this.charSetSize_] : undefined\n      }));\n    }\n    this.model.add(\n      tf.layers.dense({ units: this.charSetSize_, activation: 'softmax' }));\n  }\n\n  /**\n   * Compile model for training.\n   *\n   * @param {number} learningRate The learning rate to use during training.\n   */\n  compileModel(learningRate) {\n    const optimizer = tf.train.rmsprop(learningRate);\n    this.model.compile({ optimizer: optimizer, loss: 'categoricalCrossentropy' });\n    console.log(`Compiled model with learning rate ${learningRate}`);\n    this.model.summary();\n  }\n\n  /**\n   * Train the LSTM model.\n   *\n   * @param {number} numEpochs Number of epochs to train the model for.\n   * @param {number} examplesPerEpoch Number of epochs to use in each training\n   *   epochs.\n   * @param {number} batchSize Batch size to use during training.\n   * @param {number} validationSplit Validation split to be used during the\n   *   training epochs.\n   */\n  async fitModel(numEpochs, examplesPerEpoch, batchSize, validationSplit) {\n    let batchCount = 0;\n    const batchesPerEpoch = examplesPerEpoch / batchSize;\n    const totalBatches = numEpochs * batchesPerEpoch;\n\n    onTrainBegin();\n    await tf.nextFrame();\n\n    let t = new Date().getTime();\n    for (let i = 0; i < numEpochs; ++i) {\n      const [xs, ys] = this.textData_.nextDataEpoch(examplesPerEpoch);\n      await this.model.fit(xs, ys, {\n        epochs: 1,\n        batchSize: batchSize,\n        validationSplit,\n        callbacks: {\n          onBatchEnd: async (batch, logs) => {\n            // Calculate the training speed in the current batch, in # of\n            // examples per second.\n            const t1 = new Date().getTime();\n            const examplesPerSec = batchSize / ((t1 - t) / 1e3);\n            t = t1;\n            onTrainBatchEnd(\n              logs.loss, ++batchCount / totalBatches, examplesPerSec);\n          },\n          onEpochEnd: async (epoch, logs) => {\n            onTrainEpochEnd(logs.val_loss);\n          },\n        }\n      });\n      xs.dispose();\n      ys.dispose();\n    }\n  }\n\n  /**\n   * Generate text using the LSTM model.\n   *\n   * @param {number[]} sentenceIndices Seed sentence, represented as the\n   *   indices of the constituent characters.\n   * @param {number} length Length of the text to generate, in number of\n   *   characters.\n   * @param {number} temperature Temperature parameter. Must be a number > 0.\n   * @returns {string} The generated text.\n   */\n  async generateText(sentenceIndices, length, temperature) {\n    onTextGenerationBegin();\n    const temperatureScalar = tf.scalar(temperature);\n\n    let generated = '';\n    while (generated.length < length) {\n      // Encode the current input sequence as a one-hot Tensor.\n      const inputBuffer =\n        new tf.TensorBuffer([1, this.sampleLen_, this.charSetSize_]);\n      for (let i = 0; i < this.sampleLen_; ++i) {\n        inputBuffer.set(1, 0, i, sentenceIndices[i]);\n      }\n      const input = inputBuffer.toTensor();\n\n      // Call model.predict() to get the probability values of the next\n      // character.\n      const output = this.model.predict(input);\n\n      // Sample randomly based on the probability values.\n      const winnerIndex = sample(tf.squeeze(output), temperatureScalar);\n      const winnerChar = this.textData_.getFromCharSet(winnerIndex);\n      await onTextGenerationChar(winnerChar);\n\n      generated += winnerChar;\n      sentenceIndices = sentenceIndices.slice(1);\n      sentenceIndices.push(winnerIndex);\n\n      input.dispose();\n      output.dispose();\n    }\n    temperatureScalar.dispose();\n    return generated;\n  }\n};\n\n/**\n * A subclass of LSTMTextGenerator that supports model saving and loading.\n *\n * The model is saved to and loaded from browser's IndexedDB.\n */\nexport class SaveableLSTMTextGenerator extends LSTMTextGenerator {\n  /**\n   * Constructor of NeuralNetworkTextGenerator.\n   *\n   * @param {TextData} textData An instance of `TextData`.\n   */\n  constructor(textData) {\n    super(textData);\n    this.modelIdentifier_ = textData.dataIdentifier();\n    this.MODEL_SAVE_PATH_PREFIX_ = 'indexeddb://lstm-text-generation';\n    this.modelSavePath_ =\n      `${this.MODEL_SAVE_PATH_PREFIX_}/${this.modelIdentifier_}`;\n  }\n\n  /**\n   * Get model identifier.\n   *\n   * @returns {string} The model identifier.\n   */\n  modelIdentifier() {\n    return this.modelIdentifier_;\n  }\n\n  /**\n   * Create LSTM model if it is not saved locally; load it if it is.\n   *\n   * @param {number | number[]} lstmLayerSizes Sizes of the LSTM layers, as a\n   *   number or an non-empty array of numbers.\n   */\n  async loadModel(lstmLayerSizes) {\n    const modelsInfo = await tf.io.listModels();\n    if (this.modelSavePath_ in modelsInfo) {\n      console.log(`Loading existing model...`);\n      this.model = await tf.loadModel(this.modelSavePath_);\n      console.log(`Loaded model from ${this.modelSavePath_}`);\n    } else {\n      throw new Error(\n        `Cannot find model at ${this.modelSavePath_}. ` +\n        `Creating model from scratch.`);\n    }\n  }\n\n  /**\n   * Save the model in IndexedDB.\n   *\n   * @returns ModelInfo from the saving, if the saving succeeds.\n   */\n  async saveModel() {\n    if (this.model == null) {\n      throw new Error('Cannot save model before creating model.');\n    } else {\n      return await this.model.save(this.modelSavePath_);\n    }\n  }\n\n  /**\n   * Remove the locally saved model from IndexedDB.\n   */\n  async removeModel() {\n    if (await this.checkStoredModelStatus() == null) {\n      throw new Error(\n        'Cannot remove locally saved model because it does not exist.');\n    }\n    return await tf.io.removeModel(this.modelSavePath_);\n  }\n\n  /**\n   * Check the status of locally saved model.\n   *\n   * @returns If the locally saved model exists, the model info as a JSON\n   *   object. Else, `undefined`.\n   */\n  async checkStoredModelStatus() {\n    const modelsInfo = await tf.io.listModels();\n    return modelsInfo[this.modelSavePath_];\n  }\n\n  /**\n   * Get a representation of the sizes of the LSTM layers in the model.\n   *\n   * @returns {number | number[]} The sizes (i.e., number of units) of the\n   *   LSTM layers that the model contains. If there is only one LSTM layer, a\n   *   single number is returned; else, an Array of numbers is returned.\n   */\n  lstmLayerSizes() {\n    if (this.model == null) {\n      throw new Error('Create model first.');\n    }\n    const numLSTMLayers = this.model.layers.length - 1;\n    const layerSizes = [];\n    for (let i = 0; i < numLSTMLayers; ++i) {\n      layerSizes.push(this.model.layers[i].units);\n    }\n    return layerSizes.length === 1 ? layerSizes[0] : layerSizes;\n  }\n}\n\nsetUpUI();\n"},"lineCount":null}},"hash":"e1709a8a39ccee5768680f45b727d4d6","cacheData":{"env":{}}}